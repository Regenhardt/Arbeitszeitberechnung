@using System.Runtime.CompilerServices
<h3>Work Time during Lectures Calculator</h3>

<div>
    <label for="startDate">Vorlesungszeitraum Anfang</label>
    <input type="date" id="startDate" @bind="@StartDate" />
    <label for="endDate">Vorlesungszeitraum Ende</label>
    <input type="date" id="endDate" @bind="EndDate" />
</div>
<button disabled="@(StartDate == null || EndDate == null)" @onclick="Refresh">Refresh</button>
@if (cal != null)
{
    <div>
        Tage im Vorlesungszeitraum: @this.cal!.Days
    </div>
    <div>
        Werktage pro Woche: <input type="number" @bind="cal.WorkDaysPerWeek" />
    </div>
    <div>
        Stunden pro Tag: <input type="number" @bind="cal.FullTimeHoursPerWorkDay" />
    </div>
    <div>
        <h5>Vorlesungen</h5>
        <div style="padding-left: 50px; width: 40%;">
            @foreach (var (lecture, weeklyHours) in this.cal.LectureWeeklyHours)
            {
                <div>@lecture: <span class="float-right">@weeklyHours<span class="oi oi-x" @onclick="@(() => this.cal.LectureWeeklyHours.Remove(lecture))"></span></span></div>
            }
            <div>
                <input type="text" placeholder="Vorlesung/Praktikum/etc." @bind="NewLectureName" /> - <input type="number" placeholder="SWS" @bind="NewLectureSws" /><button disabled="@(NewLectureName == null || NewLectureSws == null)" @onclick="AddLecture">Hinzufügen</button>
            </div>
        </div>
    </div>
    <div>
        Semesterwochenstunden (SWS, Vorlesungsstunden pro Woche): @this.cal.WeeklyLearningHours
    </div>
    <div>
        Feier- oder Urlaubstage: <input type="number" @bind="this.cal.HolidaysDuringLectureFreeTimes" />
    </div>
    <div>
        <h5>Vorlesungsfreie Zeiten</h5>
        <div style="padding-left: 50px">
            @foreach (var (start, end) in this.cal.LectureFreeTimes)
            {
                <div>@start.ToShortDateString() - @end.ToShortDateString()<span class="oi oi-x" @onclick="(() => this.cal.LectureFreeTimes.Remove((start, end)))"></span></div>
            }
            <div>
                <input type="date" placeholder="Von" @bind="FreeTimeStart" /> - <input type="date" placeholder="Bis" @bind="FreeTimeEnd" /><button disabled="@(FreeTimeStart == null || FreeTimeEnd == null)" @onclick="AddNewLectureFreeTime">Hinzufügen</button>
            </div>
        </div>
    </div>
    <div>
        Gesamtstunden während des Semesters: @this.cal.OverallHoursDuringSemester
    </div>
    <div>
        Dessen Äquivalent in Vollzeittagen: @this.cal.OverallEquivalentFulltimeDaysDuringSemester
    </div>
    <div>
        Zusätzliche Arbeitsstunden außerhalb des Semesters: <input type="number" @bind="this.cal.AdditionalWorkHoursOutsideSemester" />
    </div>
    <div>
        Gesamtstunden: @this.cal.OverallWorkHours
    </div>
    <div>
        Dessen Äquivalent in Vollzeittagen: @this.cal.OverallEquivalentFulltimeDays
    </div>
}

@code {
    private DateTime? StartDate { get; set; } = new DateTime(2021, 10, 11);
    private DateTime? EndDate { get; set; } = new DateTime(2022, 2, 28);
    private LectureCal? cal { get; set; }
    private DateTime? FreeTimeStart { get; set; }
    private DateTime? FreeTimeEnd { get; set; }

    private void Refresh()
    {
        cal = new LectureCal(this.StartDate!.Value, this.EndDate!.Value);
    }

    private string? NewLectureName { get; set; }
    private int? NewLectureSws { get; set; }
    private void AddLecture()
    {
        if (NewLectureName != null && NewLectureSws.HasValue)
        {
            cal!.LectureWeeklyHours[NewLectureName] = NewLectureSws.Value;
            NewLectureName = null;
            NewLectureSws = null;
        }
    }

    private void AddNewLectureFreeTime()
    {
        if (FreeTimeStart.HasValue && FreeTimeEnd.HasValue)
        {
            cal!.LectureFreeTimes.Add((FreeTimeStart.Value, FreeTimeEnd.Value));
            FreeTimeStart = null;
            FreeTimeEnd = null;
        }
    }
}
